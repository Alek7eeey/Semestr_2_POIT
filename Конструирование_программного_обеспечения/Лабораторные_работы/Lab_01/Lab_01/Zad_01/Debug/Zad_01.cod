; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30133.0 

	TITLE	D:\studing\Конструирование программного обеспечения\Лабораторные работы\Lab_01\Lab_01\Zad_01\Debug\Zad_01.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__97D3638F_vcruntime_new@h DB 01H
__741AE07E_corecrt_math@h DB 01H
__B49664B7_stdlib@h DB 01H
__244AF085_cstdlib DB 01H
__60BC708E_cmath DB 01H
__A2143F22_corecrt_stdio_config@h DB 01H
__829E1958_corecrt_wstdio@h DB 01H
__6DFAE8B8_stdio@h DB 01H
__1FEB9909_corecrt_memcpy_s@h DB 01H
__A751F051_corecrt_memory@h DB 01H
__9200769A_corecrt_wstring@h DB 01H
__32E5F013_string@h DB 01H
__C6E16F6F_corecrt_wconio@h DB 01H
__6D390390_corecrt_wio@h DB 01H
__1157D6BA_corecrt_wtime@h DB 01H
__1DC1E279_stat@h DB 01H
__93DC0B45_wchar@h DB 01H
__589FA321_type_traits DB 01H
__12269DE6_xutility DB 01H
__20BB4341_malloc@h DB 01H
__B0A13A33_vcruntime_exception@h DB 01H
__FF458F76_exception DB 01H
__7FE5F402_limits DB 01H
__79D216CD_xmemory DB 01H
__0D019051_xstring DB 01H
__760BB52B_stdexcept DB 01H
__A4685E82_xcall_once@h DB 01H
__A0B61CF9_time@h DB 01H
__DDB379A0_xthreads@h DB 01H
__14D0A8C0_atomic DB 01H
__1B354CA2_system_error DB 01H
__65ADBEC9_vcruntime_typeinfo@h DB 01H
__62F96EFF_typeinfo DB 01H
__C34BF88C_memory DB 01H
__EF0EAF83_xfacet DB 01H
__B2D2BA86_ctype@h DB 01H
__7D708D37_xlocinfo DB 01H
__D23FE460_xlocale DB 01H
__4495FA24_xiosbase DB 01H
__4CB88277_xlocnum DB 01H
__845859A3_ios DB 01H
__5179998A_Zad_01@cpp DB 01H
__A2FF0B9E_istream DB 01H
__C12F3EA4_ostream DB 01H
__74AB0D97_streambuf DB 01H
__038A2AA6_iterator DB 01H
__B30C2184_iosfwd DB 01H
__1347750E_utility DB 01H
__E458E21C_xstddef DB 01H
__F54903A0_xatomic@h DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z	; std::_Narrow_char_traits<char,int>::length
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	?function_visYear@@YAHHQAH@Z			; function_visYear
PUBLIC	?function_numberDay@@YAHHPAHQAHH@Z		; function_numberDay
PUBLIC	_main
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_03OJJHGHEE@Rus@				; `string'
PUBLIC	??_C@_08GDDLPHOK@color?5F3@			; `string'
PUBLIC	??_C@_0DA@CAIPLFDO@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@ ; `string'
PUBLIC	??_C@_0BN@NLLMMOPA@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?d?m?$PP?5?p?n?f?d?e?m?m?h?$PP?3?5@ ; `string'
PUBLIC	??_C@_0BD@IKDKPIAI@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?3?5@ ; `string'
PUBLIC	??_C@_0CA@MNLKCKLN@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?3?5@ ; `string'
PUBLIC	??_C@_0CC@DHIPJDDH@?D?m?e?i?5?d?n?5?a?k?h?f?$OA?i?x?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP@ ; `string'
PUBLIC	??_C@_03LCPHGAHP@cls@				; `string'
PUBLIC	??_C@_07GAHJDHGN@?6Error?$CB@			; `string'
PUBLIC	??_C@_0BG@PNINEMMD@?$NN?r?n?r?5?c?n?d?5?b?h?q?n?j?n?q?m?$PL?i?$CB?5@ ; `string'
PUBLIC	??_C@_0BD@GEEDNKFK@?C?n?d?5?m?e?5?b?h?q?n?j?n?q?m?$PL?i?$CB@ ; `string'
EXTRN	__imp__system:PROC
EXTRN	_strlen:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__imp__setlocale:PROC
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BD@GEEDNKFK@?C?n?d?5?m?e?5?b?h?q?n?j?n?q?m?$PL?i?$CB@
CONST	SEGMENT
??_C@_0BD@GEEDNKFK@?C?n?d?5?m?e?5?b?h?q?n?j?n?q?m?$PL?i?$CB@ DB 0c3H, 0eeH
	DB	0e4H, ' ', 0edH, 0e5H, ' ', 0e2H, 0e8H, 0f1H, 0eeH, 0eaH, 0eeH
	DB	0f1H, 0edH, 0fbH, 0e9H, '!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PNINEMMD@?$NN?r?n?r?5?c?n?d?5?b?h?q?n?j?n?q?m?$PL?i?$CB?5@
CONST	SEGMENT
??_C@_0BG@PNINEMMD@?$NN?r?n?r?5?c?n?d?5?b?h?q?n?j?n?q?m?$PL?i?$CB?5@ DB 0ddH
	DB	0f2H, 0eeH, 0f2H, ' ', 0e3H, 0eeH, 0e4H, ' ', 0e2H, 0e8H, 0f1H
	DB	0eeH, 0eaH, 0eeH, 0f1H, 0edH, 0fbH, 0e9H, '! ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GAHJDHGN@?6Error?$CB@
CONST	SEGMENT
??_C@_07GAHJDHGN@?6Error?$CB@ DB 0aH, 'Error!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03LCPHGAHP@cls@
CONST	SEGMENT
??_C@_03LCPHGAHP@cls@ DB 'cls', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DHIPJDDH@?D?m?e?i?5?d?n?5?a?k?h?f?$OA?i?x?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP@
CONST	SEGMENT
??_C@_0CC@DHIPJDDH@?D?m?e?i?5?d?n?5?a?k?h?f?$OA?i?x?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP@ DB 0c4H
	DB	0edH, 0e5H, 0e9H, ' ', 0e4H, 0eeH, ' ', 0e1H, 0ebH, 0e8H, 0e6H
	DB	0e0H, 0e9H, 0f8H, 0e5H, 0e3H, 0eeH, ' ', 0e4H, 0edH, 0ffH, ' ', 0f0H
	DB	0eeH, 0e6H, 0e4H, 0e5H, 0edH, 0e8H, 0ffH, ': ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MNLKCKLN@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?3?5@
CONST	SEGMENT
??_C@_0CA@MNLKCKLN@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?3?5@ DB 0cfH
	DB	0eeH, 0f0H, 0ffH, 0e4H, 0eaH, 0eeH, 0e2H, 0fbH, 0e9H, ' ', 0edH
	DB	0eeH, 0ecH, 0e5H, 0f0H, ' ', 0e4H, 0edH, 0ffH, ' ', 0f0H, 0eeH
	DB	0e6H, 0e4H, 0e5H, 0edH, 0e8H, 0ffH, ': ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IKDKPIAI@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?3?5@
CONST	SEGMENT
??_C@_0BD@IKDKPIAI@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?3?5@ DB 0cfH, 0eeH
	DB	0f0H, 0ffH, 0e4H, 0eaH, 0eeH, 0e2H, 0fbH, 0e9H, ' ', 0edH, 0eeH
	DB	0ecH, 0e5H, 0f0H, ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NLLMMOPA@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?d?m?$PP?5?p?n?f?d?e?m?m?h?$PP?3?5@
CONST	SEGMENT
??_C@_0BN@NLLMMOPA@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?d?m?$PP?5?p?n?f?d?e?m?m?h?$PP?3?5@ DB 0c2H
	DB	0e2H, 0e5H, 0e4H, 0e8H, 0f2H, 0e5H, ' ', 0e4H, 0e0H, 0f2H, 0f3H
	DB	' ', 0e4H, 0edH, 0ffH, ' ', 0f0H, 0eeH, 0e6H, 0e4H, 0e5H, 0edH
	DB	0edH, 0e8H, 0ffH, ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@CAIPLFDO@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@
CONST	SEGMENT
??_C@_0DA@CAIPLFDO@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@ DB 0c2H
	DB	0e2H, 0e5H, 0e4H, 0e8H, 0f2H, 0e5H, ' ', 0e4H, 0e0H, 0f2H, 0f3H
	DB	' ', 0e2H, ' ', 0f4H, 0eeH, 0f0H, 0ecH, 0e0H, 0f2H, 0e5H, ' ', 0c4H
	DB	0c4H, 0ccH, 0ccH, 0c3H, 0c3H, 0c3H, 0c3H, '(', 0e1H, 0e5H, 0e7H
	DB	' ', 0efH, 0f0H, 0eeH, 0e1H, 0e5H, 0ebH, 0eeH, 0e2H, '): ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GDDLPHOK@color?5F3@
CONST	SEGMENT
??_C@_08GDDLPHOK@color?5F3@ DB 'color F3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03OJJHGHEE@Rus@
CONST	SEGMENT
??_C@_03OJJHGHEE@Rus@ DB 'Rus', 00H			; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	023H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	034H
	DW	0477H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	025H
	DW	07efH
voltbl	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 124  :         explicit __CLR_OR_THIS_CALL operator bool() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __C12F3EA4_ostream
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 125  :             return _Ok;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 126  :         }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -229						; size = 1
__Zero_uncaught_exceptions$ = -29			; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 109  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0001e	b9 07 00 00 00	 mov	 ecx, 7
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __C12F3EA4_ostream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 110  : #if !_HAS_EXCEPTIONS
; 111  :             const bool _Zero_uncaught_exceptions = true;
; 112  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 113  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00049	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0004e	0f b6 c0	 movzx	 eax, al
  00051	85 c0		 test	 eax, eax
  00053	75 09		 jne	 SHORT $LN4@sentry
  00055	c6 85 1b ff ff
	ff 01		 mov	 BYTE PTR tv72[ebp], 1
  0005c	eb 07		 jmp	 SHORT $LN5@sentry
$LN4@sentry:
  0005e	c6 85 1b ff ff
	ff 00		 mov	 BYTE PTR tv72[ebp], 0
$LN5@sentry:
  00065	8a 8d 1b ff ff
	ff		 mov	 cl, BYTE PTR tv72[ebp]
  0006b	88 4d e3	 mov	 BYTE PTR __Zero_uncaught_exceptions$[ebp], cl

; 114  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 115  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 116  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  : 
; 118  :             if (_Zero_uncaught_exceptions) {

  0006e	0f b6 45 e3	 movzx	 eax, BYTE PTR __Zero_uncaught_exceptions$[ebp]
  00072	85 c0		 test	 eax, eax
  00074	74 14		 je	 SHORT $LN1@sentry

; 119  :                 this->_Myostr._Osfx();

  00076	8b f4		 mov	 esi, esp
  00078	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00083	3b f4		 cmp	 esi, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@sentry:

; 120  :             }
; 121  :         }

  0008a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00092	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00095	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009c	59		 pop	 ecx
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000a6	3b ec		 cmp	 ebp, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
  000b1	cc		 int	 3
  000b2	cc		 int	 3
  000b3	cc		 int	 3
  000b4	cc		 int	 3
  000b5	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Tied$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 92   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d dc	 lea	 edi, DWORD PTR [ebp-36]
  0001e	b9 06 00 00 00	 mov	 ecx, 6
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __C12F3EA4_ostream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00049	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00055	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 93   :             if (!_Ostr.good()) {

  0005c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00064	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00067	8b f4		 mov	 esi, esp
  00069	8b ca		 mov	 ecx, edx
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	0f b6 c0	 movzx	 eax, al
  0007b	85 c0		 test	 eax, eax
  0007d	75 09		 jne	 SHORT $LN2@sentry

; 94   :                 _Ok = false;

  0007f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00082	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 95   :                 return;

  00086	eb 6a		 jmp	 SHORT $LN1@sentry
$LN2@sentry:

; 96   :             }
; 97   : 
; 98   :             const auto _Tied = _Ostr.tie();

  00088	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0008b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00090	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00093	8b f4		 mov	 esi, esp
  00095	8b ca		 mov	 ecx, edx
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  0009d	3b f4		 cmp	 esi, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	89 45 e0	 mov	 DWORD PTR __Tied$[ebp], eax

; 99   :             if (!_Tied || _Tied == &_Ostr) {

  000a7	83 7d e0 00	 cmp	 DWORD PTR __Tied$[ebp], 0
  000ab	74 08		 je	 SHORT $LN4@sentry
  000ad	8b 45 e0	 mov	 eax, DWORD PTR __Tied$[ebp]
  000b0	3b 45 08	 cmp	 eax, DWORD PTR __Ostr$[ebp]
  000b3	75 09		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 100  :                 _Ok = true;

  000b5	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 101  :                 return;

  000bc	eb 34		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 102  :             }
; 103  : 
; 104  :             _Tied->flush();

  000be	8b f4		 mov	 esi, esp
  000c0	8b 4d e0	 mov	 ecx, DWORD PTR __Tied$[ebp]
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  000c9	3b f4		 cmp	 esi, esp
  000cb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 105  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000d0	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000d8	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000db	8b f4		 mov	 esi, esp
  000dd	8b ca		 mov	 ecx, edx
  000df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000e5	3b f4		 cmp	 esi, esp
  000e7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ec	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ef	88 41 04	 mov	 BYTE PTR [ecx+4], al
$LN1@sentry:

; 106  :         }

  000f2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000fc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ff	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00106	59		 pop	 ecx
  00107	5f		 pop	 edi
  00108	5e		 pop	 esi
  00109	5b		 pop	 ebx
  0010a	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00110	3b ec		 cmp	 ebp, esp
  00112	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -232						; size = 4
__Rdbuf$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 78   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0001e	b9 07 00 00 00	 mov	 ecx, 7
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __C12F3EA4_ostream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  00049	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004e	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  00054	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  0005a	8b 02		 mov	 eax, DWORD PTR [edx]
  0005c	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  00062	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00065	8b f4		 mov	 esi, esp
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0006d	3b f4		 cmp	 esi, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	89 45 e0	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 80   :             if (_Rdbuf) {

  00077	83 7d e0 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  0007b	74 16		 je	 SHORT $LN3@Sentry_bas

; 81   :                 _Rdbuf->_Unlock();

  0007d	8b 45 e0	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00080	8b 10		 mov	 edx, DWORD PTR [eax]
  00082	8b f4		 mov	 esi, esp
  00084	8b 4d e0	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00087	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0008a	ff d0		 call	 eax
  0008c	3b f4		 cmp	 esi, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Sentry_bas:

; 82   :             }
; 83   :         }

  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000a7	3b ec		 cmp	 ebp, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
  000b2	cc		 int	 3
  000b3	cc		 int	 3
  000b4	cc		 int	 3
  000b5	cc		 int	 3
  000b6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv73 = -220						; size = 4
__Rdbuf$ = -20						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 71   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e4	 lea	 edi, DWORD PTR [ebp-28]
  00010	b9 07 00 00 00	 mov	 ecx, 7
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __C12F3EA4_ostream
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00030	89 08		 mov	 DWORD PTR [eax], ecx

; 72   :             const auto _Rdbuf = _Myostr.rdbuf();

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 08		 mov	 ecx, DWORD PTR [eax]
  00037	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  0003d	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  00043	8b 02		 mov	 eax, DWORD PTR [edx]
  00045	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  0004b	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0004e	8b f4		 mov	 esi, esp
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00056	3b f4		 cmp	 esi, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	89 45 ec	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 73   :             if (_Rdbuf) {

  00060	83 7d ec 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  00064	74 16		 je	 SHORT $LN1@Sentry_bas

; 74   :                 _Rdbuf->_Lock();

  00066	8b 45 ec	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00069	8b 10		 mov	 edx, DWORD PTR [eax]
  0006b	8b f4		 mov	 esi, esp
  0006d	8b 4d ec	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00070	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00073	ff d0		 call	 eax
  00075	3b f4		 cmp	 esi, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Sentry_bas:

; 75   :             }
; 76   :         }

  0007c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 978  :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __C12F3EA4_ostream
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 979  :     _Ostr.put(_Ostr.widen('\n'));

  00021	8b f4		 mov	 esi, esp
  00023	6a 0a		 push	 10			; 0000000aH
  00025	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0002d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00030	8b ca		 mov	 ecx, edx
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00038	3b f4		 cmp	 esi, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b f4		 mov	 esi, esp
  00041	0f b6 c0	 movzx	 eax, al
  00044	50		 push	 eax
  00045	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  0004e	3b f4		 cmp	 esi, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 980  :     _Ostr.flush();

  00055	8b f4		 mov	 esi, esp
  00057	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00060	3b f4		 cmp	 esi, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 981  :     return _Ostr;

  00067	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]

; 982  : }

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00073	3b ec		 cmp	 ebp, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -356						; size = 8
tv343 = -348						; size = 8
tv291 = -344						; size = 4
tv288 = -344						; size = 8
tv286 = -344						; size = 4
tv329 = -340						; size = 8
tv290 = -340						; size = 4
tv285 = -340						; size = 4
tv287 = -336						; size = 4
tv137 = -336						; size = 4
tv289 = -333						; size = 1
tv284 = -333						; size = 1
$T2 = -328						; size = 4
$T3 = -316						; size = 4
$T4 = -304						; size = 4
$T5 = -292						; size = 4
$T6 = -280						; size = 4
__Ok$ = -76						; size = 8
__Pad$ = -60						; size = 8
__Count$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 734  :     const char* _Val) { // insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 5c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-164]
  00021	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET __C12F3EA4_ostream
  00049	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 735  :     using _Elem = char;
; 736  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 737  : 
; 738  :     ios_base::iostate _State = ios_base::goodbit;

  0004e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 739  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  00055	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
  0005e	83 c4 04	 add	 esp, 4
  00061	33 c9		 xor	 ecx, ecx
  00063	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  00066	89 4d d8	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 740  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00069	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00071	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00074	8b f4		 mov	 esi, esp
  00076	8b ca		 mov	 ecx, edx
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv329[ebp], eax
  0008b	89 95 b0 fe ff
	ff		 mov	 DWORD PTR tv329[ebp+4], edx
  00091	83 bd b0 fe ff
	ff 00		 cmp	 DWORD PTR tv329[ebp+4], 0
  00098	7c 79		 jl	 SHORT $LN17@operator
  0009a	7f 09		 jg	 SHORT $LN24@operator
  0009c	83 bd ac fe ff
	ff 00		 cmp	 DWORD PTR tv329[ebp], 0
  000a3	76 6e		 jbe	 SHORT $LN17@operator
$LN24@operator:
  000a5	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000a8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000aa	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000ad	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000b0	8b f4		 mov	 esi, esp
  000b2	8b ca		 mov	 ecx, edx
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000ba	3b f4		 cmp	 esi, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c1	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv343[ebp], eax
  000c7	89 95 a8 fe ff
	ff		 mov	 DWORD PTR tv343[ebp+4], edx
  000cd	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv343[ebp+4]
  000d3	3b 45 d8	 cmp	 eax, DWORD PTR __Count$[ebp+4]
  000d6	7c 3b		 jl	 SHORT $LN17@operator
  000d8	7f 0b		 jg	 SHORT $LN25@operator
  000da	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv343[ebp]
  000e0	3b 4d d4	 cmp	 ecx, DWORD PTR __Count$[ebp]
  000e3	76 2e		 jbe	 SHORT $LN17@operator
$LN25@operator:
  000e5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000e8	8b 02		 mov	 eax, DWORD PTR [edx]
  000ea	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000ed	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000f0	8b f4		 mov	 esi, esp
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000f8	3b f4		 cmp	 esi, esp
  000fa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ff	2b 45 d4	 sub	 eax, DWORD PTR __Count$[ebp]
  00102	1b 55 d8	 sbb	 edx, DWORD PTR __Count$[ebp+4]
  00105	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  0010b	89 95 a0 fe ff
	ff		 mov	 DWORD PTR tv135[ebp+4], edx
  00111	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00113	0f 57 c0	 xorps	 xmm0, xmm0
  00116	66 0f 13 85 9c
	fe ff ff	 movlpd	 QWORD PTR tv135[ebp], xmm0
$LN18@operator:
  0011e	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv135[ebp]
  00124	8b 95 a0 fe ff
	ff		 mov	 edx, DWORD PTR tv135[ebp+4]
  0012a	89 4d c4	 mov	 DWORD PTR __Pad$[ebp], ecx
  0012d	89 55 c8	 mov	 DWORD PTR __Pad$[ebp+4], edx

; 741  :     const typename _Myos::sentry _Ok(_Ostr);

  00130	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00133	50		 push	 eax
  00134	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00137	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0013c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 742  : 
; 743  :     if (!_Ok) {

  00143	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00146	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  0014b	0f b6 c0	 movzx	 eax, al
  0014e	85 c0		 test	 eax, eax
  00150	75 0e		 jne	 SHORT $LN8@operator

; 744  :         _State |= ios_base::badbit;

  00152	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00155	83 c8 04	 or	 eax, 4
  00158	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 745  :     } else { // state okay, insert

  0015b	e9 ba 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 746  :         _TRY_IO_BEGIN

  00160	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 747  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  00164	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00167	8b 08		 mov	 ecx, DWORD PTR [eax]
  00169	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0016c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0016f	8b f4		 mov	 esi, esp
  00171	8b ca		 mov	 ecx, edx
  00173	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  00179	3b f4		 cmp	 esi, esp
  0017b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00180	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv137[ebp], eax
  00186	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  0018c	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00191	83 f8 40	 cmp	 eax, 64			; 00000040H
  00194	0f 84 d5 00 00
	00		 je	 $LN11@operator

; 748  :             for (; 0 < _Pad; --_Pad) { // pad on left

  0019a	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0019c	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  0019f	83 e8 01	 sub	 eax, 1
  001a2	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  001a5	83 d9 00	 sbb	 ecx, 0
  001a8	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  001ab	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
  001ae	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  001b2	0f 8c b7 00 00
	00		 jl	 $LN11@operator
  001b8	7f 0a		 jg	 SHORT $LN26@operator
  001ba	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  001be	0f 86 ab 00 00
	00		 jbe	 $LN11@operator
$LN26@operator:

; 749  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  001c4	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c9	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001cc	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001cf	8b f4		 mov	 esi, esp
  001d1	8b ca		 mov	 ecx, edx
  001d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  001d9	3b f4		 cmp	 esi, esp
  001db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e0	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv284[ebp], al
  001e6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001eb	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001ee	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001f1	8b f4		 mov	 esi, esp
  001f3	8b ca		 mov	 ecx, edx
  001f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001fb	3b f4		 cmp	 esi, esp
  001fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00202	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  00208	8b f4		 mov	 esi, esp
  0020a	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv284[ebp]
  00211	50		 push	 eax
  00212	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv285[ebp]
  00218	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0021e	3b f4		 cmp	 esi, esp
  00220	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00225	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv286[ebp], eax
  0022b	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv286[ebp]
  00231	89 8d e8 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  00237	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0023c	89 85 dc fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  00242	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  00248	52		 push	 edx
  00249	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  0024f	50		 push	 eax
  00250	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00255	83 c4 08	 add	 esp, 8
  00258	0f b6 c8	 movzx	 ecx, al
  0025b	85 c9		 test	 ecx, ecx
  0025d	74 0b		 je	 SHORT $LN12@operator

; 750  :                     _State |= ios_base::badbit; // insertion failed, quit

  0025f	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00262	83 c8 04	 or	 eax, 4
  00265	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 751  :                     break;

  00268	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 752  :                 }
; 753  :             }

  0026a	e9 2d ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 754  :         }
; 755  : 
; 756  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  0026f	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00273	75 6e		 jne	 SHORT $LN13@operator
  00275	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00278	8b 08		 mov	 ecx, DWORD PTR [eax]
  0027a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0027d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00280	8b f4		 mov	 esi, esp
  00282	8b ca		 mov	 ecx, edx
  00284	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0028a	3b f4		 cmp	 esi, esp
  0028c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00291	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
  00297	8b f4		 mov	 esi, esp
  00299	8b 45 d8	 mov	 eax, DWORD PTR __Count$[ebp+4]
  0029c	50		 push	 eax
  0029d	8b 4d d4	 mov	 ecx, DWORD PTR __Count$[ebp]
  002a0	51		 push	 ecx
  002a1	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  002a4	52		 push	 edx
  002a5	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR tv287[ebp]
  002ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  002b1	3b f4		 cmp	 esi, esp
  002b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002b8	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv288[ebp], eax
  002be	89 95 ac fe ff
	ff		 mov	 DWORD PTR tv288[ebp+4], edx
  002c4	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv288[ebp]
  002ca	3b 45 d4	 cmp	 eax, DWORD PTR __Count$[ebp]
  002cd	75 0b		 jne	 SHORT $LN27@operator
  002cf	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv288[ebp+4]
  002d5	3b 4d d8	 cmp	 ecx, DWORD PTR __Count$[ebp+4]
  002d8	74 09		 je	 SHORT $LN13@operator
$LN27@operator:

; 757  :             _State |= ios_base::badbit;

  002da	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  002dd	83 c8 04	 or	 eax, 4
  002e0	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 758  :         }
; 759  : 
; 760  :         if (_State == ios_base::goodbit) {

  002e3	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  002e7	0f 85 d5 00 00
	00		 jne	 $LN14@operator

; 761  :             for (; 0 < _Pad; --_Pad) { // pad on right

  002ed	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002ef	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  002f2	83 e8 01	 sub	 eax, 1
  002f5	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  002f8	83 d9 00	 sbb	 ecx, 0
  002fb	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  002fe	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
  00301	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  00305	0f 8c b7 00 00
	00		 jl	 $LN14@operator
  0030b	7f 0a		 jg	 SHORT $LN28@operator
  0030d	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00311	0f 86 ab 00 00
	00		 jbe	 $LN14@operator
$LN28@operator:

; 762  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00317	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0031a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0031c	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0031f	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00322	8b f4		 mov	 esi, esp
  00324	8b ca		 mov	 ecx, edx
  00326	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  0032c	3b f4		 cmp	 esi, esp
  0032e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00333	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv289[ebp], al
  00339	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0033c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0033e	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00341	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00344	8b f4		 mov	 esi, esp
  00346	8b ca		 mov	 ecx, edx
  00348	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0034e	3b f4		 cmp	 esi, esp
  00350	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00355	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  0035b	8b f4		 mov	 esi, esp
  0035d	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv289[ebp]
  00364	50		 push	 eax
  00365	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv290[ebp]
  0036b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00371	3b f4		 cmp	 esi, esp
  00373	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00378	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv291[ebp], eax
  0037e	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv291[ebp]
  00384	89 8d d0 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  0038a	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0038f	89 85 c4 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00395	8d 95 d0 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  0039b	52		 push	 edx
  0039c	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  003a2	50		 push	 eax
  003a3	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  003a8	83 c4 08	 add	 esp, 8
  003ab	0f b6 c8	 movzx	 ecx, al
  003ae	85 c9		 test	 ecx, ecx
  003b0	74 0b		 je	 SHORT $LN15@operator

; 763  :                     _State |= ios_base::badbit; // insertion failed, quit

  003b2	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003b5	83 c8 04	 or	 eax, 4
  003b8	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 764  :                     break;

  003bb	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 765  :                 }
; 766  :             }

  003bd	e9 2d ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 767  :         }
; 768  : 
; 769  :         _Ostr.width(0);

  003c2	8b f4		 mov	 esi, esp
  003c4	6a 00		 push	 0
  003c6	6a 00		 push	 0
  003c8	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  003cd	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003d0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003d3	8b ca		 mov	 ecx, edx
  003d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  003db	3b f4		 cmp	 esi, esp
  003dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003e2	eb 26		 jmp	 SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 770  :         _CATCH_IO_(ios_base, _Ostr)

  003e4	8b f4		 mov	 esi, esp
  003e6	6a 01		 push	 1
  003e8	6a 04		 push	 4
  003ea	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ef	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003f2	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003f5	8b ca		 mov	 ecx, edx
  003f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003fd	3b f4		 cmp	 esi, esp
  003ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00404	b8 00 00 00 00	 mov	 eax, $LN23@operator
  00409	c3		 ret	 0
$LN19@operator:
  0040a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00411	eb 07		 jmp	 SHORT $LN9@operator
$LN23@operator:
  00413	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN9@operator:

; 771  :     }
; 772  : 
; 773  :     _Ostr.setstate(_State);

  0041a	8b f4		 mov	 esi, esp
  0041c	6a 00		 push	 0
  0041e	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00421	50		 push	 eax
  00422	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00425	8b 11		 mov	 edx, DWORD PTR [ecx]
  00427	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0042a	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0042d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00433	3b f4		 cmp	 esi, esp
  00435	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 774  :     return _Ostr;

  0043a	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0043d	89 85 b8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00443	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0044a	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0044d	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00452	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 775  : }

  00458	52		 push	 edx
  00459	8b cd		 mov	 ecx, ebp
  0045b	50		 push	 eax
  0045c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN32@operator
  00462	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00467	58		 pop	 eax
  00468	5a		 pop	 edx
  00469	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0046c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00473	59		 pop	 ecx
  00474	5f		 pop	 edi
  00475	5e		 pop	 esi
  00476	5b		 pop	 ebx
  00477	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0047a	33 cd		 xor	 ecx, ebp
  0047c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00481	81 c4 64 01 00
	00		 add	 esp, 356		; 00000164H
  00487	3b ec		 cmp	 ebp, esp
  00489	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0048e	8b e5		 mov	 esp, ebp
  00490	5d		 pop	 ebp
  00491	c3		 ret	 0
  00492	66 90		 npad	 2
$LN32@operator:
  00494	01 00 00 00	 DD	 1
  00498	00 00 00 00	 DD	 $LN31@operator
$LN31@operator:
  0049c	b4 ff ff ff	 DD	 -76			; ffffffb4H
  004a0	08 00 00 00	 DD	 8
  004a4	00 00 00 00	 DD	 $LN29@operator
$LN29@operator:
  004a8	5f		 DB	 95			; 0000005fH
  004a9	4f		 DB	 79			; 0000004fH
  004aa	6b		 DB	 107			; 0000006bH
  004ab	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 98 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-360]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\studing\Конструирование программного обеспечения\Лабораторные работы\Lab_01\Lab_01\Zad_01\Zad_01.cpp
;	COMDAT _main
_TEXT	SEGMENT
_i$1 = -280						; size = 4
_i$2 = -268						; size = 4
_month_day_visakosny$ = -256				; size = 48
_month_day$ = -200					; size = 48
_number2$ = -144					; size = 4
_number1$ = -132					; size = 4
_number_birthday$ = -120				; size = 4
_day_for_birthday$ = -108				; size = 4
_day_number$ = -96					; size = 4
_month$ = -84						; size = 4
_day$ = -72						; size = 4
_year$ = -60						; size = 4
_data$ = -48						; size = 4
_birthday_month$ = -36					; size = 4
_birthday_day$ = -24					; size = 4
_birthday$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_main	PROC						; COMDAT

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 01 00
	00		 sub	 esp, 476		; 000001dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd e4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-284]
  00012	b9 47 00 00 00	 mov	 ecx, 71			; 00000047H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __5179998A_Zad_01@cpp
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 11   : 	setlocale(LC_ALL, "Rus");

  00032	8b f4		 mov	 esi, esp
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_03OJJHGHEE@Rus@
  00039	6a 00		 push	 0
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setlocale
  00041	83 c4 08	 add	 esp, 8
  00044	3b f4		 cmp	 esi, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 12   : 	system("color F3");

  0004b	8b f4		 mov	 esi, esp
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_08GDDLPHOK@color?5F3@
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__system
  00058	83 c4 04	 add	 esp, 4
  0005b	3b f4		 cmp	 esi, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 13   : 	int birthday, birthday_day, birthday_month, data, year, day, month, day_number = 0, 

  00062	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _day_number$[ebp], 0

; 14   : 		day_for_birthday, number_birthday = 0, number1 = 0, number2 = 0;

  00069	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _number_birthday$[ebp], 0
  00070	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _number1$[ebp], 0
  0007a	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _number2$[ebp], 0

; 15   : 	
; 16   : 	int month_day[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };

  00084	c7 85 38 ff ff
	ff 1f 00 00 00	 mov	 DWORD PTR _month_day$[ebp], 31 ; 0000001fH
  0008e	c7 85 3c ff ff
	ff 1c 00 00 00	 mov	 DWORD PTR _month_day$[ebp+4], 28 ; 0000001cH
  00098	c7 85 40 ff ff
	ff 1f 00 00 00	 mov	 DWORD PTR _month_day$[ebp+8], 31 ; 0000001fH
  000a2	c7 85 44 ff ff
	ff 1e 00 00 00	 mov	 DWORD PTR _month_day$[ebp+12], 30 ; 0000001eH
  000ac	c7 85 48 ff ff
	ff 1f 00 00 00	 mov	 DWORD PTR _month_day$[ebp+16], 31 ; 0000001fH
  000b6	c7 85 4c ff ff
	ff 1e 00 00 00	 mov	 DWORD PTR _month_day$[ebp+20], 30 ; 0000001eH
  000c0	c7 85 50 ff ff
	ff 1f 00 00 00	 mov	 DWORD PTR _month_day$[ebp+24], 31 ; 0000001fH
  000ca	c7 85 54 ff ff
	ff 1f 00 00 00	 mov	 DWORD PTR _month_day$[ebp+28], 31 ; 0000001fH
  000d4	c7 85 58 ff ff
	ff 1e 00 00 00	 mov	 DWORD PTR _month_day$[ebp+32], 30 ; 0000001eH
  000de	c7 85 5c ff ff
	ff 1f 00 00 00	 mov	 DWORD PTR _month_day$[ebp+36], 31 ; 0000001fH
  000e8	c7 85 60 ff ff
	ff 1e 00 00 00	 mov	 DWORD PTR _month_day$[ebp+40], 30 ; 0000001eH
  000f2	c7 85 64 ff ff
	ff 1f 00 00 00	 mov	 DWORD PTR _month_day$[ebp+44], 31 ; 0000001fH

; 17   : 	int month_day_visakosny[12] = { 31,29,31,30,31,30,31,31,30,31,30,31 };

  000fc	c7 85 00 ff ff
	ff 1f 00 00 00	 mov	 DWORD PTR _month_day_visakosny$[ebp], 31 ; 0000001fH
  00106	c7 85 04 ff ff
	ff 1d 00 00 00	 mov	 DWORD PTR _month_day_visakosny$[ebp+4], 29 ; 0000001dH
  00110	c7 85 08 ff ff
	ff 1f 00 00 00	 mov	 DWORD PTR _month_day_visakosny$[ebp+8], 31 ; 0000001fH
  0011a	c7 85 0c ff ff
	ff 1e 00 00 00	 mov	 DWORD PTR _month_day_visakosny$[ebp+12], 30 ; 0000001eH
  00124	c7 85 10 ff ff
	ff 1f 00 00 00	 mov	 DWORD PTR _month_day_visakosny$[ebp+16], 31 ; 0000001fH
  0012e	c7 85 14 ff ff
	ff 1e 00 00 00	 mov	 DWORD PTR _month_day_visakosny$[ebp+20], 30 ; 0000001eH
  00138	c7 85 18 ff ff
	ff 1f 00 00 00	 mov	 DWORD PTR _month_day_visakosny$[ebp+24], 31 ; 0000001fH
  00142	c7 85 1c ff ff
	ff 1f 00 00 00	 mov	 DWORD PTR _month_day_visakosny$[ebp+28], 31 ; 0000001fH
  0014c	c7 85 20 ff ff
	ff 1e 00 00 00	 mov	 DWORD PTR _month_day_visakosny$[ebp+32], 30 ; 0000001eH
  00156	c7 85 24 ff ff
	ff 1f 00 00 00	 mov	 DWORD PTR _month_day_visakosny$[ebp+36], 31 ; 0000001fH
  00160	c7 85 28 ff ff
	ff 1e 00 00 00	 mov	 DWORD PTR _month_day_visakosny$[ebp+40], 30 ; 0000001eH
  0016a	c7 85 2c ff ff
	ff 1f 00 00 00	 mov	 DWORD PTR _month_day_visakosny$[ebp+44], 31 ; 0000001fH

; 18   : 
; 19   : 
; 20   : 	cout << "Р’РІРµРґРёС‚Рµ РґР°С‚Сѓ РІ С„РѕСЂРјР°С‚Рµ Р”Р”РњРњР“Р“Р“Р“(Р±РµР· РїСЂРѕР±РµР»РѕРІ): "; cin >> data;

  00174	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@CAIPLFDO@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@
  00179	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0017e	50		 push	 eax
  0017f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00184	83 c4 08	 add	 esp, 8
  00187	8b f4		 mov	 esi, esp
  00189	8d 45 d0	 lea	 eax, DWORD PTR _data$[ebp]
  0018c	50		 push	 eax
  0018d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  00193	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z
  00199	3b f4		 cmp	 esi, esp
  0019b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 21   : 	cout << "Р’РІРµРґРёС‚Рµ РґР°С‚Сѓ РґРЅСЏ СЂРѕР¶РґРµРЅРЅРёСЏ: "; cin >> birthday;

  001a0	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@NLLMMOPA@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?d?m?$PP?5?p?n?f?d?e?m?m?h?$PP?3?5@
  001a5	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001aa	50		 push	 eax
  001ab	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001b0	83 c4 08	 add	 esp, 8
  001b3	8b f4		 mov	 esi, esp
  001b5	8d 45 f4	 lea	 eax, DWORD PTR _birthday$[ebp]
  001b8	50		 push	 eax
  001b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  001bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z
  001c5	3b f4		 cmp	 esi, esp
  001c7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 22   : 	
; 23   : 		if (data > 0 && data < 31129999 && birthday > 0 && birthday < 31129999)

  001cc	83 7d d0 00	 cmp	 DWORD PTR _data$[ebp], 0
  001d0	0f 8e c3 05 00
	00		 jle	 $LN8@main
  001d6	81 7d d0 8f 01
	db 01		 cmp	 DWORD PTR _data$[ebp], 31129999 ; 01db018fH
  001dd	0f 8d b6 05 00
	00		 jge	 $LN8@main
  001e3	83 7d f4 00	 cmp	 DWORD PTR _birthday$[ebp], 0
  001e7	0f 8e ac 05 00
	00		 jle	 $LN8@main
  001ed	81 7d f4 8f 01
	db 01		 cmp	 DWORD PTR _birthday$[ebp], 31129999 ; 01db018fH
  001f4	0f 8d 9f 05 00
	00		 jge	 $LN8@main

; 24   : 		{
; 25   : 			birthday_day = birthday / 1000000;

  001fa	8b 45 f4	 mov	 eax, DWORD PTR _birthday$[ebp]
  001fd	99		 cdq
  001fe	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00203	f7 f9		 idiv	 ecx
  00205	89 45 e8	 mov	 DWORD PTR _birthday_day$[ebp], eax

; 26   : 			birthday_month = (birthday - birthday_day * 1000000) / 10000;

  00208	69 45 e8 40 42
	0f 00		 imul	 eax, DWORD PTR _birthday_day$[ebp], 1000000
  0020f	8b 4d f4	 mov	 ecx, DWORD PTR _birthday$[ebp]
  00212	2b c8		 sub	 ecx, eax
  00214	8b c1		 mov	 eax, ecx
  00216	99		 cdq
  00217	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  0021c	f7 f9		 idiv	 ecx
  0021e	89 45 dc	 mov	 DWORD PTR _birthday_month$[ebp], eax

; 27   : 
; 28   : 			day = data / 1000000;

  00221	8b 45 d0	 mov	 eax, DWORD PTR _data$[ebp]
  00224	99		 cdq
  00225	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  0022a	f7 f9		 idiv	 ecx
  0022c	89 45 b8	 mov	 DWORD PTR _day$[ebp], eax

; 29   : 			month = (data - day * 1000000) / 10000;

  0022f	69 45 b8 40 42
	0f 00		 imul	 eax, DWORD PTR _day$[ebp], 1000000
  00236	8b 4d d0	 mov	 ecx, DWORD PTR _data$[ebp]
  00239	2b c8		 sub	 ecx, eax
  0023b	8b c1		 mov	 eax, ecx
  0023d	99		 cdq
  0023e	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  00243	f7 f9		 idiv	 ecx
  00245	89 45 ac	 mov	 DWORD PTR _month$[ebp], eax

; 30   : 			year = (data - day * 1000000 - month * 10000);

  00248	69 45 b8 40 42
	0f 00		 imul	 eax, DWORD PTR _day$[ebp], 1000000
  0024f	8b 4d d0	 mov	 ecx, DWORD PTR _data$[ebp]
  00252	2b c8		 sub	 ecx, eax
  00254	69 55 ac 10 27
	00 00		 imul	 edx, DWORD PTR _month$[ebp], 10000
  0025b	2b ca		 sub	 ecx, edx
  0025d	89 4d c4	 mov	 DWORD PTR _year$[ebp], ecx

; 31   : 
; 32   : 			if (year % 4 == 0 && year % 100 != 0)

  00260	8b 45 c4	 mov	 eax, DWORD PTR _year$[ebp]
  00263	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00268	79 05		 jns	 SHORT $LN26@main
  0026a	48		 dec	 eax
  0026b	83 c8 fc	 or	 eax, -4			; fffffffcH
  0026e	40		 inc	 eax
$LN26@main:
  0026f	85 c0		 test	 eax, eax
  00271	0f 85 9c 02 00
	00		 jne	 $LN10@main
  00277	8b 45 c4	 mov	 eax, DWORD PTR _year$[ebp]
  0027a	99		 cdq
  0027b	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00280	f7 f9		 idiv	 ecx
  00282	85 d2		 test	 edx, edx
  00284	0f 84 89 02 00
	00		 je	 $LN10@main

; 33   : 			{
; 34   : 
; 35   : 				if (month > 0 && month <= 12 && birthday_month > 0 && birthday_month <= 12 && day <= month_day_visakosny[month - 1] && birthday_day <= month_day_visakosny[birthday_month - 1])

  0028a	83 7d ac 00	 cmp	 DWORD PTR _month$[ebp], 0
  0028e	0f 8e 3a 02 00
	00		 jle	 $LN12@main
  00294	83 7d ac 0c	 cmp	 DWORD PTR _month$[ebp], 12 ; 0000000cH
  00298	0f 8f 30 02 00
	00		 jg	 $LN12@main
  0029e	83 7d dc 00	 cmp	 DWORD PTR _birthday_month$[ebp], 0
  002a2	0f 8e 26 02 00
	00		 jle	 $LN12@main
  002a8	83 7d dc 0c	 cmp	 DWORD PTR _birthday_month$[ebp], 12 ; 0000000cH
  002ac	0f 8f 1c 02 00
	00		 jg	 $LN12@main
  002b2	8b 45 ac	 mov	 eax, DWORD PTR _month$[ebp]
  002b5	8b 4d b8	 mov	 ecx, DWORD PTR _day$[ebp]
  002b8	3b 8c 85 fc fe
	ff ff		 cmp	 ecx, DWORD PTR _month_day_visakosny$[ebp+eax*4-4]
  002bf	0f 8f 09 02 00
	00		 jg	 $LN12@main
  002c5	8b 45 dc	 mov	 eax, DWORD PTR _birthday_month$[ebp]
  002c8	8b 4d e8	 mov	 ecx, DWORD PTR _birthday_day$[ebp]
  002cb	3b 8c 85 fc fe
	ff ff		 cmp	 ecx, DWORD PTR _month_day_visakosny$[ebp+eax*4-4]
  002d2	0f 8f f6 01 00
	00		 jg	 $LN12@main

; 36   : 				{
; 37   : 
; 38   : 					cout << day << endl;

  002d8	8b f4		 mov	 esi, esp
  002da	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  002df	8b fc		 mov	 edi, esp
  002e1	8b 45 b8	 mov	 eax, DWORD PTR _day$[ebp]
  002e4	50		 push	 eax
  002e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  002eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  002f1	3b fc		 cmp	 edi, esp
  002f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002f8	8b c8		 mov	 ecx, eax
  002fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00300	3b f4		 cmp	 esi, esp
  00302	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 39   : 					cout << month << endl;

  00307	8b f4		 mov	 esi, esp
  00309	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0030e	8b fc		 mov	 edi, esp
  00310	8b 45 ac	 mov	 eax, DWORD PTR _month$[ebp]
  00313	50		 push	 eax
  00314	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0031a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00320	3b fc		 cmp	 edi, esp
  00322	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00327	8b c8		 mov	 ecx, eax
  00329	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0032f	3b f4		 cmp	 esi, esp
  00331	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 40   : 					cout << year << endl;

  00336	8b f4		 mov	 esi, esp
  00338	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0033d	8b fc		 mov	 edi, esp
  0033f	8b 45 c4	 mov	 eax, DWORD PTR _year$[ebp]
  00342	50		 push	 eax
  00343	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00349	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0034f	3b fc		 cmp	 edi, esp
  00351	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00356	8b c8		 mov	 ecx, eax
  00358	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0035e	3b f4		 cmp	 esi, esp
  00360	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 41   : 
; 42   : 					function_visYear(year, month_day);

  00365	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _month_day$[ebp]
  0036b	50		 push	 eax
  0036c	8b 4d c4	 mov	 ecx, DWORD PTR _year$[ebp]
  0036f	51		 push	 ecx
  00370	e8 00 00 00 00	 call	 ?function_visYear@@YAHHQAH@Z ; function_visYear
  00375	83 c4 08	 add	 esp, 8

; 43   : 
; 44   : 					function_numberDay(year, &number1, month_day, month);

  00378	8b 45 ac	 mov	 eax, DWORD PTR _month$[ebp]
  0037b	50		 push	 eax
  0037c	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _month_day$[ebp]
  00382	51		 push	 ecx
  00383	8d 95 7c ff ff
	ff		 lea	 edx, DWORD PTR _number1$[ebp]
  00389	52		 push	 edx
  0038a	8b 45 c4	 mov	 eax, DWORD PTR _year$[ebp]
  0038d	50		 push	 eax
  0038e	e8 00 00 00 00	 call	 ?function_numberDay@@YAHHPAHQAHH@Z ; function_numberDay
  00393	83 c4 10	 add	 esp, 16			; 00000010H

; 45   : 
; 46   : 					day_number = number1 + day;

  00396	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _number1$[ebp]
  0039c	03 45 b8	 add	 eax, DWORD PTR _day$[ebp]
  0039f	89 45 a0	 mov	 DWORD PTR _day_number$[ebp], eax

; 47   : 
; 48   : 					for (int i = 0; i < birthday_month - 1; i++)

  003a2	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$2[ebp], 0
  003ac	eb 0f		 jmp	 SHORT $LN4@main
$LN2@main:
  003ae	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _i$2[ebp]
  003b4	83 c0 01	 add	 eax, 1
  003b7	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _i$2[ebp], eax
$LN4@main:
  003bd	8b 45 dc	 mov	 eax, DWORD PTR _birthday_month$[ebp]
  003c0	83 e8 01	 sub	 eax, 1
  003c3	39 85 f4 fe ff
	ff		 cmp	 DWORD PTR _i$2[ebp], eax
  003c9	7d 1b		 jge	 SHORT $LN3@main

; 49   : 					{
; 50   : 						number2 += month_day[i];

  003cb	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _i$2[ebp]
  003d1	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _number2$[ebp]
  003d7	03 8c 85 38 ff
	ff ff		 add	 ecx, DWORD PTR _month_day$[ebp+eax*4]
  003de	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _number2$[ebp], ecx

; 51   : 					}

  003e4	eb c8		 jmp	 SHORT $LN2@main
$LN3@main:

; 52   : 
; 53   : 					number_birthday = number2 + birthday_day;

  003e6	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _number2$[ebp]
  003ec	03 45 e8	 add	 eax, DWORD PTR _birthday_day$[ebp]
  003ef	89 45 88	 mov	 DWORD PTR _number_birthday$[ebp], eax

; 54   : 					day_for_birthday = number_birthday - day_number;

  003f2	8b 45 88	 mov	 eax, DWORD PTR _number_birthday$[ebp]
  003f5	2b 45 a0	 sub	 eax, DWORD PTR _day_number$[ebp]
  003f8	89 45 94	 mov	 DWORD PTR _day_for_birthday$[ebp], eax

; 55   : 
; 56   : 					if (day_for_birthday < 0)

  003fb	79 12		 jns	 SHORT $LN14@main

; 57   : 					{
; 58   : 						day_for_birthday *= (-1);

  003fd	6b 45 94 ff	 imul	 eax, DWORD PTR _day_for_birthday$[ebp], -1
  00401	89 45 94	 mov	 DWORD PTR _day_for_birthday$[ebp], eax

; 59   : 						day_for_birthday += 365;

  00404	8b 45 94	 mov	 eax, DWORD PTR _day_for_birthday$[ebp]
  00407	05 6d 01 00 00	 add	 eax, 365		; 0000016dH
  0040c	89 45 94	 mov	 DWORD PTR _day_for_birthday$[ebp], eax
$LN14@main:

; 60   : 					}
; 61   : 
; 62   : 					cout << "РџРѕСЂСЏРґРєРѕРІС‹Р№ РЅРѕРјРµСЂ: " << day_number << endl;

  0040f	8b f4		 mov	 esi, esp
  00411	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00416	8b fc		 mov	 edi, esp
  00418	8b 45 a0	 mov	 eax, DWORD PTR _day_number$[ebp]
  0041b	50		 push	 eax
  0041c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@IKDKPIAI@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?3?5@
  00421	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00427	51		 push	 ecx
  00428	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0042d	83 c4 08	 add	 esp, 8
  00430	8b c8		 mov	 ecx, eax
  00432	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00438	3b fc		 cmp	 edi, esp
  0043a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0043f	8b c8		 mov	 ecx, eax
  00441	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00447	3b f4		 cmp	 esi, esp
  00449	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 63   : 					cout << "РџРѕСЂСЏРґРєРѕРІС‹Р№ РЅРѕРјРµСЂ РґРЅСЏ СЂРѕР¶РґРµРЅРёСЏ: " << number_birthday << endl;

  0044e	8b f4		 mov	 esi, esp
  00450	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00455	8b fc		 mov	 edi, esp
  00457	8b 45 88	 mov	 eax, DWORD PTR _number_birthday$[ebp]
  0045a	50		 push	 eax
  0045b	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@MNLKCKLN@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?3?5@
  00460	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00466	51		 push	 ecx
  00467	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0046c	83 c4 08	 add	 esp, 8
  0046f	8b c8		 mov	 ecx, eax
  00471	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00477	3b fc		 cmp	 edi, esp
  00479	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0047e	8b c8		 mov	 ecx, eax
  00480	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00486	3b f4		 cmp	 esi, esp
  00488	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 64   : 					cout << "Р”РЅРµР№ РґРѕ Р±Р»РёР¶Р°Р№С€РµРіРѕ РґРЅСЏ СЂРѕР¶РґРµРЅРёСЏ: " << day_for_birthday << endl;

  0048d	8b f4		 mov	 esi, esp
  0048f	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00494	8b fc		 mov	 edi, esp
  00496	8b 45 94	 mov	 eax, DWORD PTR _day_for_birthday$[ebp]
  00499	50		 push	 eax
  0049a	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@DHIPJDDH@?D?m?e?i?5?d?n?5?a?k?h?f?$OA?i?x?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP@
  0049f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  004a5	51		 push	 ecx
  004a6	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  004ab	83 c4 08	 add	 esp, 8
  004ae	8b c8		 mov	 ecx, eax
  004b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  004b6	3b fc		 cmp	 edi, esp
  004b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004bd	8b c8		 mov	 ecx, eax
  004bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  004c5	3b f4		 cmp	 esi, esp
  004c7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 65   : 				}

  004cc	eb 40		 jmp	 SHORT $LN13@main
$LN12@main:

; 66   : 
; 67   : 				else
; 68   : 				{
; 69   : 					system("cls");

  004ce	8b f4		 mov	 esi, esp
  004d0	68 00 00 00 00	 push	 OFFSET ??_C@_03LCPHGAHP@cls@
  004d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__system
  004db	83 c4 04	 add	 esp, 4
  004de	3b f4		 cmp	 esi, esp
  004e0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 70   : 					cout << "\nError!" << endl;

  004e5	8b f4		 mov	 esi, esp
  004e7	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  004ec	68 00 00 00 00	 push	 OFFSET ??_C@_07GAHJDHGN@?6Error?$CB@
  004f1	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  004f6	50		 push	 eax
  004f7	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  004fc	83 c4 08	 add	 esp, 8
  004ff	8b c8		 mov	 ecx, eax
  00501	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00507	3b f4		 cmp	 esi, esp
  00509	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN13@main:

; 71   : 				}
; 72   : 
; 73   : 			}

  0050e	e9 84 02 00 00	 jmp	 $LN11@main
$LN10@main:

; 74   : 
; 75   : 			else
; 76   : 			{
; 77   : 				{
; 78   : 					if (month > 0 && month <= 12 && birthday_month > 0 && birthday_month <= 12 && day <= month_day[month - 1] && birthday_day <= month_day[birthday_month - 1])

  00513	83 7d ac 00	 cmp	 DWORD PTR _month$[ebp], 0
  00517	0f 8e 3a 02 00
	00		 jle	 $LN15@main
  0051d	83 7d ac 0c	 cmp	 DWORD PTR _month$[ebp], 12 ; 0000000cH
  00521	0f 8f 30 02 00
	00		 jg	 $LN15@main
  00527	83 7d dc 00	 cmp	 DWORD PTR _birthday_month$[ebp], 0
  0052b	0f 8e 26 02 00
	00		 jle	 $LN15@main
  00531	83 7d dc 0c	 cmp	 DWORD PTR _birthday_month$[ebp], 12 ; 0000000cH
  00535	0f 8f 1c 02 00
	00		 jg	 $LN15@main
  0053b	8b 45 ac	 mov	 eax, DWORD PTR _month$[ebp]
  0053e	8b 4d b8	 mov	 ecx, DWORD PTR _day$[ebp]
  00541	3b 8c 85 34 ff
	ff ff		 cmp	 ecx, DWORD PTR _month_day$[ebp+eax*4-4]
  00548	0f 8f 09 02 00
	00		 jg	 $LN15@main
  0054e	8b 45 dc	 mov	 eax, DWORD PTR _birthday_month$[ebp]
  00551	8b 4d e8	 mov	 ecx, DWORD PTR _birthday_day$[ebp]
  00554	3b 8c 85 34 ff
	ff ff		 cmp	 ecx, DWORD PTR _month_day$[ebp+eax*4-4]
  0055b	0f 8f f6 01 00
	00		 jg	 $LN15@main

; 79   : 					{
; 80   : 
; 81   : 						cout << day << endl;

  00561	8b f4		 mov	 esi, esp
  00563	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00568	8b fc		 mov	 edi, esp
  0056a	8b 45 b8	 mov	 eax, DWORD PTR _day$[ebp]
  0056d	50		 push	 eax
  0056e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00574	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0057a	3b fc		 cmp	 edi, esp
  0057c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00581	8b c8		 mov	 ecx, eax
  00583	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00589	3b f4		 cmp	 esi, esp
  0058b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 82   : 						cout << month << endl;

  00590	8b f4		 mov	 esi, esp
  00592	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00597	8b fc		 mov	 edi, esp
  00599	8b 45 ac	 mov	 eax, DWORD PTR _month$[ebp]
  0059c	50		 push	 eax
  0059d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  005a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  005a9	3b fc		 cmp	 edi, esp
  005ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005b0	8b c8		 mov	 ecx, eax
  005b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  005b8	3b f4		 cmp	 esi, esp
  005ba	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 83   : 						cout << year << endl;

  005bf	8b f4		 mov	 esi, esp
  005c1	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  005c6	8b fc		 mov	 edi, esp
  005c8	8b 45 c4	 mov	 eax, DWORD PTR _year$[ebp]
  005cb	50		 push	 eax
  005cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  005d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  005d8	3b fc		 cmp	 edi, esp
  005da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005df	8b c8		 mov	 ecx, eax
  005e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  005e7	3b f4		 cmp	 esi, esp
  005e9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 84   : 
; 85   : 						function_visYear(year, month_day);

  005ee	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _month_day$[ebp]
  005f4	50		 push	 eax
  005f5	8b 4d c4	 mov	 ecx, DWORD PTR _year$[ebp]
  005f8	51		 push	 ecx
  005f9	e8 00 00 00 00	 call	 ?function_visYear@@YAHHQAH@Z ; function_visYear
  005fe	83 c4 08	 add	 esp, 8

; 86   : 
; 87   : 						function_numberDay(year, &number1, month_day, month);

  00601	8b 45 ac	 mov	 eax, DWORD PTR _month$[ebp]
  00604	50		 push	 eax
  00605	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _month_day$[ebp]
  0060b	51		 push	 ecx
  0060c	8d 95 7c ff ff
	ff		 lea	 edx, DWORD PTR _number1$[ebp]
  00612	52		 push	 edx
  00613	8b 45 c4	 mov	 eax, DWORD PTR _year$[ebp]
  00616	50		 push	 eax
  00617	e8 00 00 00 00	 call	 ?function_numberDay@@YAHHPAHQAHH@Z ; function_numberDay
  0061c	83 c4 10	 add	 esp, 16			; 00000010H

; 88   : 
; 89   : 						day_number = number1 + day;

  0061f	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _number1$[ebp]
  00625	03 45 b8	 add	 eax, DWORD PTR _day$[ebp]
  00628	89 45 a0	 mov	 DWORD PTR _day_number$[ebp], eax

; 90   : 
; 91   : 						for (int i = 0; i < birthday_month - 1; i++)

  0062b	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$1[ebp], 0
  00635	eb 0f		 jmp	 SHORT $LN7@main
$LN5@main:
  00637	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _i$1[ebp]
  0063d	83 c0 01	 add	 eax, 1
  00640	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _i$1[ebp], eax
$LN7@main:
  00646	8b 45 dc	 mov	 eax, DWORD PTR _birthday_month$[ebp]
  00649	83 e8 01	 sub	 eax, 1
  0064c	39 85 e8 fe ff
	ff		 cmp	 DWORD PTR _i$1[ebp], eax
  00652	7d 1b		 jge	 SHORT $LN6@main

; 92   : 						{
; 93   : 							number2 += month_day[i];

  00654	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _i$1[ebp]
  0065a	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _number2$[ebp]
  00660	03 8c 85 38 ff
	ff ff		 add	 ecx, DWORD PTR _month_day$[ebp+eax*4]
  00667	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _number2$[ebp], ecx

; 94   : 						}

  0066d	eb c8		 jmp	 SHORT $LN5@main
$LN6@main:

; 95   : 
; 96   : 						number_birthday = number2 + birthday_day;

  0066f	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _number2$[ebp]
  00675	03 45 e8	 add	 eax, DWORD PTR _birthday_day$[ebp]
  00678	89 45 88	 mov	 DWORD PTR _number_birthday$[ebp], eax

; 97   : 						day_for_birthday = number_birthday - day_number;

  0067b	8b 45 88	 mov	 eax, DWORD PTR _number_birthday$[ebp]
  0067e	2b 45 a0	 sub	 eax, DWORD PTR _day_number$[ebp]
  00681	89 45 94	 mov	 DWORD PTR _day_for_birthday$[ebp], eax

; 98   : 
; 99   : 						if (day_for_birthday < 0)

  00684	79 12		 jns	 SHORT $LN17@main

; 100  : 						{
; 101  : 							day_for_birthday *= (-1);

  00686	6b 45 94 ff	 imul	 eax, DWORD PTR _day_for_birthday$[ebp], -1
  0068a	89 45 94	 mov	 DWORD PTR _day_for_birthday$[ebp], eax

; 102  : 							day_for_birthday += 365;

  0068d	8b 45 94	 mov	 eax, DWORD PTR _day_for_birthday$[ebp]
  00690	05 6d 01 00 00	 add	 eax, 365		; 0000016dH
  00695	89 45 94	 mov	 DWORD PTR _day_for_birthday$[ebp], eax
$LN17@main:

; 103  : 						}
; 104  : 
; 105  : 						cout << "РџРѕСЂСЏРґРєРѕРІС‹Р№ РЅРѕРјРµСЂ: " << day_number << endl;

  00698	8b f4		 mov	 esi, esp
  0069a	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0069f	8b fc		 mov	 edi, esp
  006a1	8b 45 a0	 mov	 eax, DWORD PTR _day_number$[ebp]
  006a4	50		 push	 eax
  006a5	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@IKDKPIAI@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?3?5@
  006aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  006b0	51		 push	 ecx
  006b1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  006b6	83 c4 08	 add	 esp, 8
  006b9	8b c8		 mov	 ecx, eax
  006bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  006c1	3b fc		 cmp	 edi, esp
  006c3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006c8	8b c8		 mov	 ecx, eax
  006ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  006d0	3b f4		 cmp	 esi, esp
  006d2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 106  : 						cout << "РџРѕСЂСЏРґРєРѕРІС‹Р№ РЅРѕРјРµСЂ РґРЅСЏ СЂРѕР¶РґРµРЅРёСЏ: " << number_birthday << endl;

  006d7	8b f4		 mov	 esi, esp
  006d9	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  006de	8b fc		 mov	 edi, esp
  006e0	8b 45 88	 mov	 eax, DWORD PTR _number_birthday$[ebp]
  006e3	50		 push	 eax
  006e4	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@MNLKCKLN@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?3?5@
  006e9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  006ef	51		 push	 ecx
  006f0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  006f5	83 c4 08	 add	 esp, 8
  006f8	8b c8		 mov	 ecx, eax
  006fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00700	3b fc		 cmp	 edi, esp
  00702	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00707	8b c8		 mov	 ecx, eax
  00709	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0070f	3b f4		 cmp	 esi, esp
  00711	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 107  : 						cout << "Р”РЅРµР№ РґРѕ Р±Р»РёР¶Р°Р№С€РµРіРѕ РґРЅСЏ СЂРѕР¶РґРµРЅРёСЏ: " << day_for_birthday << endl;

  00716	8b f4		 mov	 esi, esp
  00718	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0071d	8b fc		 mov	 edi, esp
  0071f	8b 45 94	 mov	 eax, DWORD PTR _day_for_birthday$[ebp]
  00722	50		 push	 eax
  00723	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@DHIPJDDH@?D?m?e?i?5?d?n?5?a?k?h?f?$OA?i?x?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP@
  00728	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0072e	51		 push	 ecx
  0072f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00734	83 c4 08	 add	 esp, 8
  00737	8b c8		 mov	 ecx, eax
  00739	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0073f	3b fc		 cmp	 edi, esp
  00741	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00746	8b c8		 mov	 ecx, eax
  00748	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0074e	3b f4		 cmp	 esi, esp
  00750	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 108  : 					}

  00755	eb 40		 jmp	 SHORT $LN11@main
$LN15@main:

; 109  : 
; 110  : 					else
; 111  : 					{
; 112  : 						system("cls");

  00757	8b f4		 mov	 esi, esp
  00759	68 00 00 00 00	 push	 OFFSET ??_C@_03LCPHGAHP@cls@
  0075e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__system
  00764	83 c4 04	 add	 esp, 4
  00767	3b f4		 cmp	 esi, esp
  00769	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 113  : 						cout << "\nError!" << endl;

  0076e	8b f4		 mov	 esi, esp
  00770	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00775	68 00 00 00 00	 push	 OFFSET ??_C@_07GAHJDHGN@?6Error?$CB@
  0077a	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0077f	50		 push	 eax
  00780	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00785	83 c4 08	 add	 esp, 8
  00788	8b c8		 mov	 ecx, eax
  0078a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00790	3b f4		 cmp	 esi, esp
  00792	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN11@main:

; 114  : 					}
; 115  : 				}
; 116  : 			}
; 117  : 		}

  00797	eb 40		 jmp	 SHORT $LN1@main
$LN8@main:

; 118  : 
; 119  : 
; 120  : 
; 121  : 		
; 122  : 		else
; 123  : 		{
; 124  : 			system("cls");

  00799	8b f4		 mov	 esi, esp
  0079b	68 00 00 00 00	 push	 OFFSET ??_C@_03LCPHGAHP@cls@
  007a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__system
  007a6	83 c4 04	 add	 esp, 4
  007a9	3b f4		 cmp	 esi, esp
  007ab	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 125  : 			 cout << "\nError!" << endl;

  007b0	8b f4		 mov	 esi, esp
  007b2	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  007b7	68 00 00 00 00	 push	 OFFSET ??_C@_07GAHJDHGN@?6Error?$CB@
  007bc	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  007c1	50		 push	 eax
  007c2	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  007c7	83 c4 08	 add	 esp, 8
  007ca	8b c8		 mov	 ecx, eax
  007cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  007d2	3b f4		 cmp	 esi, esp
  007d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@main:

; 126  : 		}
; 127  : 
; 128  : 	
; 129  : }

  007d9	33 c0		 xor	 eax, eax
  007db	52		 push	 edx
  007dc	8b cd		 mov	 ecx, ebp
  007de	50		 push	 eax
  007df	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN25@main
  007e5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  007ea	58		 pop	 eax
  007eb	5a		 pop	 edx
  007ec	5f		 pop	 edi
  007ed	5e		 pop	 esi
  007ee	5b		 pop	 ebx
  007ef	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  007f2	33 cd		 xor	 ecx, ebp
  007f4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  007f9	81 c4 dc 01 00
	00		 add	 esp, 476		; 000001dcH
  007ff	3b ec		 cmp	 ebp, esp
  00801	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00806	8b e5		 mov	 esp, ebp
  00808	5d		 pop	 ebp
  00809	c3		 ret	 0
  0080a	66 90		 npad	 2
$LN25@main:
  0080c	05 00 00 00	 DD	 5
  00810	00 00 00 00	 DD	 $LN24@main
$LN24@main:
  00814	f4 ff ff ff	 DD	 -12			; fffffff4H
  00818	04 00 00 00	 DD	 4
  0081c	00 00 00 00	 DD	 $LN19@main
  00820	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00824	04 00 00 00	 DD	 4
  00828	00 00 00 00	 DD	 $LN20@main
  0082c	7c ff ff ff	 DD	 -132			; ffffff7cH
  00830	04 00 00 00	 DD	 4
  00834	00 00 00 00	 DD	 $LN21@main
  00838	38 ff ff ff	 DD	 -200			; ffffff38H
  0083c	30 00 00 00	 DD	 48			; 00000030H
  00840	00 00 00 00	 DD	 $LN22@main
  00844	00 ff ff ff	 DD	 -256			; ffffff00H
  00848	30 00 00 00	 DD	 48			; 00000030H
  0084c	00 00 00 00	 DD	 $LN23@main
$LN23@main:
  00850	6d		 DB	 109			; 0000006dH
  00851	6f		 DB	 111			; 0000006fH
  00852	6e		 DB	 110			; 0000006eH
  00853	74		 DB	 116			; 00000074H
  00854	68		 DB	 104			; 00000068H
  00855	5f		 DB	 95			; 0000005fH
  00856	64		 DB	 100			; 00000064H
  00857	61		 DB	 97			; 00000061H
  00858	79		 DB	 121			; 00000079H
  00859	5f		 DB	 95			; 0000005fH
  0085a	76		 DB	 118			; 00000076H
  0085b	69		 DB	 105			; 00000069H
  0085c	73		 DB	 115			; 00000073H
  0085d	61		 DB	 97			; 00000061H
  0085e	6b		 DB	 107			; 0000006bH
  0085f	6f		 DB	 111			; 0000006fH
  00860	73		 DB	 115			; 00000073H
  00861	6e		 DB	 110			; 0000006eH
  00862	79		 DB	 121			; 00000079H
  00863	00		 DB	 0
$LN22@main:
  00864	6d		 DB	 109			; 0000006dH
  00865	6f		 DB	 111			; 0000006fH
  00866	6e		 DB	 110			; 0000006eH
  00867	74		 DB	 116			; 00000074H
  00868	68		 DB	 104			; 00000068H
  00869	5f		 DB	 95			; 0000005fH
  0086a	64		 DB	 100			; 00000064H
  0086b	61		 DB	 97			; 00000061H
  0086c	79		 DB	 121			; 00000079H
  0086d	00		 DB	 0
$LN21@main:
  0086e	6e		 DB	 110			; 0000006eH
  0086f	75		 DB	 117			; 00000075H
  00870	6d		 DB	 109			; 0000006dH
  00871	62		 DB	 98			; 00000062H
  00872	65		 DB	 101			; 00000065H
  00873	72		 DB	 114			; 00000072H
  00874	31		 DB	 49			; 00000031H
  00875	00		 DB	 0
$LN20@main:
  00876	64		 DB	 100			; 00000064H
  00877	61		 DB	 97			; 00000061H
  00878	74		 DB	 116			; 00000074H
  00879	61		 DB	 97			; 00000061H
  0087a	00		 DB	 0
$LN19@main:
  0087b	62		 DB	 98			; 00000062H
  0087c	69		 DB	 105			; 00000069H
  0087d	72		 DB	 114			; 00000072H
  0087e	74		 DB	 116			; 00000074H
  0087f	68		 DB	 104			; 00000068H
  00880	64		 DB	 100			; 00000064H
  00881	61		 DB	 97			; 00000061H
  00882	79		 DB	 121			; 00000079H
  00883	00		 DB	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\studing\Конструирование программного обеспечения\Лабораторные работы\Lab_01\Lab_01\Zad_01\Zad_01.cpp
;	COMDAT ?function_numberDay@@YAHHPAHQAHH@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_year1$ = 8						; size = 4
_number$ = 12						; size = 4
_month_day1$ = 16					; size = 4
_month1$ = 20						; size = 4
?function_numberDay@@YAHHPAHQAHH@Z PROC			; function_numberDay, COMDAT

; 133  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  0000f	b9 03 00 00 00	 mov	 ecx, 3
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __5179998A_Zad_01@cpp
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 134  : 	for (int i = 0; i < month1 - 1; i++)

  00025	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0002c	eb 09		 jmp	 SHORT $LN4@function_n
$LN2@function_n:
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@function_n:
  00037	8b 45 14	 mov	 eax, DWORD PTR _month1$[ebp]
  0003a	83 e8 01	 sub	 eax, 1
  0003d	39 45 f8	 cmp	 DWORD PTR _i$1[ebp], eax
  00040	7d 15		 jge	 SHORT $LN3@function_n

; 135  : 	{
; 136  : 		*number += month_day1[i];

  00042	8b 45 0c	 mov	 eax, DWORD PTR _number$[ebp]
  00045	8b 08		 mov	 ecx, DWORD PTR [eax]
  00047	8b 55 f8	 mov	 edx, DWORD PTR _i$1[ebp]
  0004a	8b 45 10	 mov	 eax, DWORD PTR _month_day1$[ebp]
  0004d	03 0c 90	 add	 ecx, DWORD PTR [eax+edx*4]
  00050	8b 55 0c	 mov	 edx, DWORD PTR _number$[ebp]
  00053	89 0a		 mov	 DWORD PTR [edx], ecx

; 137  : 	}

  00055	eb d7		 jmp	 SHORT $LN2@function_n
$LN3@function_n:

; 138  : 	return year1;

  00057	8b 45 08	 mov	 eax, DWORD PTR _year1$[ebp]

; 139  : }

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00063	3b ec		 cmp	 ebp, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
?function_numberDay@@YAHHPAHQAHH@Z ENDP			; function_numberDay
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\studing\Конструирование программного обеспечения\Лабораторные работы\Lab_01\Lab_01\Zad_01\Zad_01.cpp
;	COMDAT ?function_visYear@@YAHHQAH@Z
_TEXT	SEGMENT
_year1$ = 8						; size = 4
_month_day1$ = 12					; size = 4
?function_visYear@@YAHHQAH@Z PROC			; function_visYear, COMDAT

; 141  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __5179998A_Zad_01@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 142  : 	if (year1 % 4 == 0 && year1 % 100 !=0)

  00021	8b 45 08	 mov	 eax, DWORD PTR _year1$[ebp]
  00024	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00029	79 05		 jns	 SHORT $LN5@function_v
  0002b	48		 dec	 eax
  0002c	83 c8 fc	 or	 eax, -4			; fffffffcH
  0002f	40		 inc	 eax
$LN5@function_v:
  00030	85 c0		 test	 eax, eax
  00032	75 4c		 jne	 SHORT $LN2@function_v
  00034	8b 45 08	 mov	 eax, DWORD PTR _year1$[ebp]
  00037	99		 cdq
  00038	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0003d	f7 f9		 idiv	 ecx
  0003f	85 d2		 test	 edx, edx
  00041	74 3d		 je	 SHORT $LN2@function_v

; 143  : 	{
; 144  : 		cout << "Р­С‚РѕС‚ РіРѕРґ РІРёСЃРѕРєРѕСЃРЅС‹Р№! " << endl;

  00043	8b f4		 mov	 esi, esp
  00045	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@PNINEMMD@?$NN?r?n?r?5?c?n?d?5?b?h?q?n?j?n?q?m?$PL?i?$CB?5@
  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0005a	83 c4 08	 add	 esp, 8
  0005d	8b c8		 mov	 ecx, eax
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00065	3b f4		 cmp	 esi, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 145  : 		month_day1[1] = 29;

  0006c	b8 04 00 00 00	 mov	 eax, 4
  00071	c1 e0 00	 shl	 eax, 0
  00074	8b 4d 0c	 mov	 ecx, DWORD PTR _month_day1$[ebp]
  00077	c7 04 01 1d 00
	00 00		 mov	 DWORD PTR [ecx+eax], 29	; 0000001dH

; 146  : 
; 147  : 	}

  0007e	eb 29		 jmp	 SHORT $LN3@function_v
$LN2@function_v:

; 148  : 	else
; 149  : 	{
; 150  : 		cout << "Р“РѕРґ РЅРµ РІРёСЃРѕРєРѕСЃРЅС‹Р№!" << endl;

  00080	8b f4		 mov	 esi, esp
  00082	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@GEEDNKFK@?C?n?d?5?m?e?5?b?h?q?n?j?n?q?m?$PL?i?$CB@
  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00097	83 c4 08	 add	 esp, 8
  0009a	8b c8		 mov	 ecx, eax
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  000a2	3b f4		 cmp	 esi, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@function_v:

; 151  : 	}
; 152  : 	return month_day1[1];

  000a9	b8 04 00 00 00	 mov	 eax, 4
  000ae	c1 e0 00	 shl	 eax, 0
  000b1	8b 4d 0c	 mov	 ecx, DWORD PTR _month_day1$[ebp]
  000b4	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]

; 153  : 
; 154  : }

  000b7	5f		 pop	 edi
  000b8	5e		 pop	 esi
  000b9	5b		 pop	 ebx
  000ba	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000c0	3b ec		 cmp	 ebp, esp
  000c2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c3		 ret	 0
?function_visYear@@YAHHQAH@Z ENDP			; function_visYear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 477  :     _NODISCARD static constexpr int_type eof() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __0D019051_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 478  :         return static_cast<int_type>(EOF);

  00021	83 c8 ff	 or	 eax, -1

; 479  :     }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -196						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 469  :     _NODISCARD static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d fc	 lea	 edi, DWORD PTR [ebp-4]
  0000f	b9 01 00 00 00	 mov	 ecx, 1
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __0D019051_xstring
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 470  :         return _Left == _Right;

  00025	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0002b	8b 10		 mov	 edx, DWORD PTR [eax]
  0002d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0002f	75 0c		 jne	 SHORT $LN3@eq_int_typ
  00031	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
  0003b	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  0003d	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
  00047	8a 85 3c ff ff
	ff		 mov	 al, BYTE PTR tv65[ebp]

; 471  :     }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00056	3b ec		 cmp	 ebp, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 396  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __0D019051_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 397  :         // find length of null-terminated string
; 398  : #if _HAS_CXX17
; 399  : #ifdef __cpp_char8_t
; 400  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 401  : #if _HAS_U8_INTRINSICS
; 402  :             return __builtin_u8strlen(_First);
; 403  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 404  :             return _Primary_char_traits::length(_First);
; 405  : #endif // _HAS_U8_INTRINSICS
; 406  :         } else
; 407  : #endif // __cpp_char8_t
; 408  :         {
; 409  :             return __builtin_strlen(_First);
; 410  :         }
; 411  : #else // _HAS_CXX17
; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00021	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _strlen
  0002a	83 c4 04	 add	 esp, 4

; 413  : #endif // _HAS_CXX17
; 414  :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\studing\Конструирование программного обеспечения\Лабораторные работы\Lab_01\Lab_01\Zad_01\Zad_01.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __5179998A_Zad_01@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\studing\Конструирование программного обеспечения\Лабораторные работы\Lab_01\Lab_01\Zad_01\Zad_01.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __5179998A_Zad_01@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
